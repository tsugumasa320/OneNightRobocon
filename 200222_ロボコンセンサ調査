◆はじめに
　ワンナイトロボコン出場にあたり、自機ロボットがどういったことができるのかを確認しておく必要がある。
ここでは、作戦立案の一助となるように使用できるセンサーをまとめ、チームの知識レベルの向上を目指す。
（※あんまりわかってない部分多しです。悪しからず）

◆目的
　・シュミレーター予選の作戦立案の材料集め

◆方法
　・予め"~/catkin_ws/src/burger_war/burger_war/scripts"内の"all_sensor_sample.py"に使用できるセンサーの記載がある。
各センサを一つ一つ実行し、どのような値が取得できるのか確認する。

◆使えるセンサー一覧
　1.Lidar:レーザー画像検出と測距 
 2.カメラ:自機ロボット正面の画像を取得(FPSみたいな画角)
 3.IMU(慣性計測装置):3軸ジャイロと3方向の加速度計
　4.オドメトリ:車輪やステアリングの回転速度の計算から、それぞれの移動量を求め、その累積計算から位置推定する
　5.joint_state : 現在の関節角度(どこの関節かは不明)

→カメラは画像認識のコード書くのは難しそう。他の手段をうまく組み合わせて賢くしたい



以下、サンプル回して取得したデータとメモ書き
(#部分は湯谷のメモです。)

----------------------------------------------------------------------------------------------

◆1.Lidar
・360行の配列。1度ずつで360度取得？（推測）

※生データ（参考）
intensities: [-1.0189013481140137, -1.0189013481140137, -1.0189013481140137, -1.0189013481140137, -1.0189013481140137, -1.0189013481140137, -1.0189013481140137, -1.0189013481140137, -1.0189013481140137, -1.0189013481140137, -1.0189013481140137, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.556310079256489e+31, 7.556310079256489e+31, 7.556310079256489e+31, 7.556310079256489e+31, 7.556310079256489e+31, 7.556310079256489e+31, 7.556310079256489e+31, 7.556310079256489e+31, 7.556310079256489e+31, 7.556310079256489e+31, 7.556310079256489e+31, 7.556310079256489e+31, 7.556310079256489e+31, 7.556310079256489e+31, 7.556310079256489e+31, 1.8139217896747834e-32, 1.8139217896747834e-32, 1.8139217896747834e-32, 1.8139217896747834e-32, 1.8139217896747834e-32, 1.8139217896747834e-32, 1.8139217896747834e-32, 1.8139217896747834e-32, 1.8139217896747834e-32, 1.8139217896747834e-32, 1.8139217896747834e-32, 1.8139217896747834e-32, 1.8139217896747834e-32, 1.8139217896747834e-32, 1.8139217896747834e-32, 1.8139217896747834e-32, 1.8139217896747834e-32, 1.8139217896747834e-32, 7.556310079256489e+31, 7.556310079256489e+31, 7.556310079256489e+31, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.556310079256489e+31, 7.556310079256489e+31, 7.556310079256489e+31, 7.556310079256489e+31, 7.556310079256489e+31, 7.556310079256489e+31, 7.556310079256489e+31, 7.556310079256489e+31, 1.0089348943138683e-43, 1.0089348943138683e-43, 1.0089348943138683e-43, 1.0089348943138683e-43, 1.0089348943138683e-43, 1.0089348943138683e-43, 1.0089348943138683e-43, 1.0089348943138683e-43, 1.0089348943138683e-43, 1.0089348943138683e-43, 1.0089348943138683e-43, 1.0089348943138683e-43, 1.0089348943138683e-43, 1.0089348943138683e-43, 1.0089348943138683e-43, 1.0089348943138683e-43, 1.0089348943138683e-43, 1.0089348943138683e-43, 1.076584646497987e+21, 1.076584646497987e+21, 1.076584646497987e+21, 1.076584646497987e+21, 1.076584646497987e+21, 1.076584646497987e+21, 1.076584646497987e+21, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.401298464324817e-45, 1.401298464324817e-45, 1.401298464324817e-45, 1.401298464324817e-45, 1.401298464324817e-45, 1.401298464324817e-45, 1.401298464324817e-45, 1.401298464324817e-45, 1.401298464324817e-45, 1.401298464324817e-45, 1.401298464324817e-45, 1.401298464324817e-45, 1.401298464324817e-45, 1.401298464324817e-45, 0.0, 0.0, 0.0, 0.0, -1.0189013481140137, -1.0189013481140137, -1.0189013481140137, -1.0189013481140137, -1.0189013481140137, -1.0189013481140137, -1.0189013481140137, -1.0189013481140137, -1.0189013481140137, -1.0189013481140137, -1.0189013481140137, -1.0189013481140137, -1.0189013481140137, -1.0189013481140137, -1.0189013481140137, -1.0189013481140137, -1.0189013481140137, -1.0189013481140137, -1.0189013481140137, -1.0189013481140137, -1.0189013481140137, -1.0189013481140137, -1.0189013481140137, -1.0189013481140137, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0189013481140137, -1.0189013481140137, -1.0189013481140137, -1.0189013481140137, -1.0189013481140137, -1.0189013481140137, -1.0189013481140137, -1.0189013481140137, -1.0189013481140137, -1.0189013481140137, -1.0189013481140137, -1.0189013481140137, -1.0189013481140137, -1.0189013481140137, -1.0189013481140137, -1.0189013481140137, -1.0189013481140137, -1.0189013481140137, -1.0189013481140137, -1.0189013481140137, -1.0189013481140137, -1.0189013481140137, -1.0189013481140137, -1.0189013481140137, -1.0189013481140137, -1.0189013481140137, -1.0189013481140137, -1.0189013481140137, -1.0189013481140137, -1.0189013481140137, -1.0189013481140137, -1.0189013481140137, -1.0189013481140137, -1.0189013481140137, -1.0189013481140137, -1.0189013481140137, -1.0189013481140137, -1.0189013481140137, -1.0189013481140137, -1.0189013481140137, -1.0189013481140137, -1.0189013481140137, -1.0189013481140137, -1.0189013481140137, -1.0189013481140137, -1.0189013481140137, -1.0189013481140137, -1.0189013481140137, -1.0189013481140137, -1.0189013481140137, -1.0189013481140137, -1.0189013481140137, -1.0189013481140137, -1.0189013481140137, -1.0189013481140137, -1.0189013481140137, -1.0189013481140137, -1.0189013481140137]

◆2.カメラ
　・bgr8で取得してる(sampleはopencvで画像表示)
※bgr8：CV_8UC3、青緑赤の色順のカラー画像
http://wiki.ros.org/cv_bridge/Tutorials/UsingCvBridgeToConvertBetweenROSImagesAndOpenCVImages

◆3.IMU（慣性計測装置）
参考：
https://qiita.com/srs/items/97c5d791a76d170ebaa0 #IMUについての説明
http://www.opengl-tutorial.org/jp/beginners-tutorials/tutorial-3-matrices/　# x,y,z,wって何！？(わからん）
https://www.sports-sensing.com/support/motionmesurement/motion_biomechanics/basis_gyro.html　#ジャイロセンサーの基礎
https://ednjapan.com/edn/articles/1406/09/news014.html　#3軸ジャイロについての説明


[INFO] [1582375269.704611　#時間的な何か（推測）, 1653.322000 #全体の秒数]: header: 
  seq: 29252
  stamp: 
    secs: 1653　#1秒
    nsecs: 321000000　#ナノ秒(msecの1/1000)
  frame_id: "base_footprint"
orientation: #姿勢
  x: -7.39207675754e-06
  y: 0.00386136819446
  z: 8.29267448071e-05
  w: 0.999992541424
orientation_covariance: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0] #姿勢の共分散（？）ずっと0
angular_velocity: #角速度
  x: 3.51993694084e-05
  y: -0.000188655053534
  z: -0.000140172265405
angular_velocity_covariance: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]　#ずっと0
linear_acceleration: #重力の影響を除いた加速度
  x: -2.3645632643e-06
  y: 3.60618484333e-05
  z: -3.93830640071e-07 #高さ方向
linear_acceleration_covariance: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]#ずっと0

◆オドメトリ
参考：
https://shogo82148.github.io/homepage/memo/tenchijin/odmetry.html　#オドメトリとは何か

[INFO] [1582379676.594031, 3424.022000]: odom pose_x: -15.5129906834
[INFO] [1582379676.594644, 3424.022000]: odom pose_y: -6.37934012213

◆joint_state
・どこの関節？笑

[INFO] [1582380031.354953, 3617.124000]: joint_state R: 3616.86287025
[INFO] [1582380031.355765, 3617.124000]: joint_state L: 3497.51702444







